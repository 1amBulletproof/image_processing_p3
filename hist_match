#!/usr/local/bin/python2
#@Author    Brandon Tarney
#@Since     10/13/2017
#@Usage     python2 hist_match <src_img_path> <ref_image_path> [<mask_img_path>]

import time
import sys
import cv2
import numpy as np
from matplotlib import pyplot as plt

from keyboard_handler import KeyboardHandler
from mouse_handler import MouseHandler
from usage import Usage
from image_shower import ImageShower


def main():
    usage = Usage("USAGE: python2 %s <src_img_path> <ref_image_path> <optional_mask_path>" % (sys.argv[0]))
    img_helper = ImageShower()
    key_helper = KeyboardHandler()

    #Check and Read arguments
    if len(sys.argv) > 4 or len(sys.argv) < 2:
        print "ERROR: Missing Arguments"
        usage.show()
        sys.exit(1)
    elif sys.argv[1] == "-h":
        usage.show()
        sys.exit(0)
    elif len(sys.argv) == 4:
        input_mask = sys.argv[3]
        ref_img_name = sys.argv[2]
        src_img_name = sys.argv[1]
        mask = True;
    elif len(sys.argv) == 3:
        ref_img_name = sys.argv[2]
        src_img_name = sys.argv[1]
        mask = False

    #Read/load image:
    src_img = cv2.imread(src_img_name,1) #color img
    ref_img = cv2.imread(ref_img_name,1) #color img

    #Show OG image (sanity check):
    img_helper.show_image(src_img, "Input Image")
    img_helper.show_image(ref_img, "Reference Image")

    #Img Processing
    print
    print("MATCH THE REFERENCE HISTOGRAM")
    transformed_img = match_histogram(src_img, ref_img)
    print
    img_helper.show_image(transformed_img, "Histogram Matched Image")

    if mask :
        mask = cv2.imread(input_mask, 0) #grayscale mask
        print("MASK THE IMAGE")
        masked_img = mask_image(transformed_img, mask)
        print
        transformed_img = masked_img

    #Show Final Image (with changes):
    key = img_helper.show_image(transformed_img, "Final IMG")
    key_helper.handle_keyboard_input(key, transformed_img)

    src_img_rgb = cv2.cvtColor(src_img, cv2.COLOR_BGR2RGB)
    transformed_img_rgb = cv2.cvtColor(transformed_img, cv2.COLOR_BGR2RGB)
    plt.subplot(121),plt.imshow(src_img_rgb), plt.title('Input Img'), plt.axis('off')
    plt.subplot(122),plt.imshow(transformed_img_rgb), plt.title('Final Img'), plt.axis('off')
    plt.show(block=True)


def calc_cdf(histogram):
    cdf = histogram.cumsum()
    normal_cdf = cdf / float(cdf.max())
    return normal_cdf


def calc_lookup(src_cdf, ref_cdf):
    lookup_table = np.zeros(256)
    lookup_value = 0
    for srcPixelValue in range(len(src_cdf)):
        lookup_value
        for refPixelValue in range(len(ref_cdf)):
            if ref_cdf[refPixelValue] >= src_cdf[srcPixelValue]:
                lookup_value = refPixelValue
                break
        lookup_table[srcPixelValue] = lookup_value
    return lookup_table


def match_histogram(src_img, ref_img):
    print("- Split the img to manipulate 1 color at a time")
    src_b,src_g,src_r = cv2.split(src_img)
    ref_b,ref_g,ref_r = cv2.split(ref_img)

    print("- Calculate each b,g,r histogram ")
    src_blue_hist, bins = np.histogram(src_b.flatten(), 256, [0,256])
    src_green_hist, bins2 = np.histogram(src_g.flatten(), 256, [0,256])
    src_red_hist, bins3 = np.histogram(src_r.flatten(), 256, [0,256])    

    ref_blue_hist, bins4 = np.histogram(ref_b.flatten(), 256, [0,256])    
    ref_green_hist, bins5 = np.histogram(ref_g.flatten(), 256, [0,256])
    ref_red_hist, bins6 = np.histogram(ref_r.flatten(), 256, [0,256])

    print("- Calculate (normalized) CDF for each image")
    src_blue_cdf = calc_cdf(src_blue_hist)
    src_green_cdf = calc_cdf(src_green_hist)
    src_red_cdf = calc_cdf(src_red_hist)

    ref_blue_cdf = calc_cdf(ref_blue_hist)
    ref_green_cdf = calc_cdf(ref_green_hist)
    ref_red_cdf = calc_cdf(ref_red_hist)

    print("- Create a lookup table for each color")
    blue_lookup_table = calc_lookup(src_blue_cdf, ref_blue_cdf)
    green_lookup_table = calc_lookup(src_green_cdf, ref_green_cdf)
    red_lookup_table = calc_lookup(src_red_cdf, ref_red_cdf)

    print("- Transform the original colors by the lookup function")
    transformed_blue = cv2.LUT(src_b, blue_lookup_table)
    transformed_green = cv2.LUT(src_g, green_lookup_table)
    transformed_red = cv2.LUT(src_r, red_lookup_table)

    print("- Recombine/return the image")
    transformed_img = cv2.merge([transformed_blue, transformed_green, transformed_red])
    transformed_img = cv2.convertScaleAbs(transformed_img)
    return transformed_img


def mask_image(img, mask):
    print("- Splitting the colors")
    color1, color2, color3 = cv2.split(img)

    print("- Resizing mask to fit image")
    scaled_mask = cv2.resize(mask, (img.shape[1], img.shape[0]), cv2.INTER_NEAREST)
    print("- Img Dimensions: {0} by {1} vs. mask dimensions {2} by {3}".format(
        img.shape[0], img.shape[1], scaled_mask.shape[0], scaled_mask.shape[1])) 

    print("- Normalizing the mask")
    normalized_scaled_mask = scaled_mask / float(255)

    print("- Scale/mask color values")
    color1 = color1 * normalized_scaled_mask
    color1 = color1.astype(int)
    color2 = color2 * normalized_scaled_mask
    color2 = color2.astype(int)
    color3 = color3 * normalized_scaled_mask
    color3 = color3.astype(int)

    print("- Recombine/return the image")
    merge = cv2.merge([color1, color2, color3])
    final_img = cv2.convertScaleAbs(merge)
    return final_img


if __name__ == "__main__":
        main()
